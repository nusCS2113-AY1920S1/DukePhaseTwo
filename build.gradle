import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.openjfx.javafxplugin' version '0.0.7'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'org.asciidoctor.jvm.convert' version '2.3.0'
    id 'application'
}

// Specifies the entry point of the application
mainClassName = 'duke.Launcher'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

run {
    standardInput = System.in
}

javafx {
    version = "11.0.2"
    modules = [
            'javafx.controls'
            , 'javafx.base'
            , 'javafx.graphics'
            , 'javafx.fxml'
            , 'javafx.web'
    ]
}

repositories {
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

checkstyle {
    toolVersion = '8.23'
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    String testFxVersion = '4.0.15-alpha'
    String jUnitVersion = '5.5.0'
    String javaFxVersion = '11'

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-media', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-media', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-media', version: javaFxVersion, classifier: 'linux'
    implementation group: 'org.openjfx', name: 'javafx-web', version: javaFxVersion, classifier: 'win'
    implementation group: 'org.openjfx', name: 'javafx-web', version: javaFxVersion, classifier: 'mac'
    implementation group: 'org.openjfx', name: 'javafx-web', version: javaFxVersion, classifier: 'linux'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9.3'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.9'

    testImplementation group: 'org.testfx', name: 'testfx-core', version: testFxVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: jUnitVersion

    testRuntimeOnly group: 'org.testfx', name: 'openjfx-monocle', version: 'jdk-11+26'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jUnitVersion
}

shadowJar {
    archiveBaseName = "duke"
    archiveVersion = "1.1"
    archiveClassifier = null
    archiveAppendix = null
}

task(guiTests)
task(nonGuiTests)

// Run `test` task if `guiTests` or `nonGuiTests` is specified
guiTests.dependsOn test
nonGuiTests.dependsOn test

task(allTests)

// `allTests` implies both `guiTests` and `nonGuiTests`
allTests.dependsOn guiTests
allTests.dependsOn nonGuiTests

test {
    systemProperty 'testfx.setup.timeout', '60000'

    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.SKIPPED

        // Prints the currently running test's name in the CI's build log,
        // so that we can check if tests are being silently skipped or
        // stalling the build.
        if (System.env.'CI') {
            events << TestLogEvent.STARTED
        }
    }

    jacoco {
        destinationFile = new File("${buildDir}/jacoco/test.exec")
    }

    doFirst {
        boolean runGuiTests = gradle.taskGraph.hasTask(guiTests)
        boolean runNonGuiTests = gradle.taskGraph.hasTask(nonGuiTests)

        if (!runGuiTests && !runNonGuiTests) {
            runGuiTests = true
            runNonGuiTests = true
        }

        if (runNonGuiTests) {
            test.include 'duke/**'
        }

        if (runGuiTests) {
        }

        if (!runGuiTests) {
        }
    }
}

task headless {
    doLast {
        println 'Setting headless mode properties.'
        test {
            systemProperties = [
                    'testfx.robot': 'glass',
                    'testfx.headless': 'true',
                    'prism.order': 'sw',
                    'prism.text': 't2k',
            ]
        }
    }
}

// Makes sure that headless properties are set before running tests
test.mustRunAfter headless

defaultTasks 'clean', 'headless', 'allTests'
